1. Descripción del problema / Contexto

En la actualidad, muchas personas buscan mejorar su alimentación y mantener un seguimiento adecuado de sus macronutrientes (proteínas, carbohidratos y grasas) para cumplir metas específicas como aumentar masa muscular, bajar de peso o mantener un equilibrio saludable.

El problema es que llevar un registro manual de las comidas diarias resulta complicado y propenso a errores. Por ello, este proyecto desarrolla un programa en Python que permite al usuario registrar sus metas nutricionales, anotar las comidas que consume, visualizar su progreso diario y semanal, y mantener una base de datos simple de alimentos, todo desde la consola.

Este proyecto aplica los conceptos aprendidos durante el curso:

Uso de variables, condicionales y ciclos (for, while, if).

Manejo de listas y strings.

Lectura y escritura de archivos de texto.

Organización del código mediante funciones y un menú principal.

Separación modular del código (funciones en un archivo y main en otro).

El programa simula un sistema básico de control nutricional personal con un menú interactivo que guía al usuario paso a paso para ingresar sus datos, registrar comidas, calcular consumos y revisar sus avances.

2. Algoritmos del programa
 Algoritmo general del programa

Iniciar el programa e importar el módulo Seguimiento_Alimenticio.

Mostrar el menú principal con las opciones disponibles.

Según la elección del usuario:

Registrar o editar su meta de macronutrientes.

Registrar una nueva comida con sus macros.

Mostrar las comidas registradas filtradas por tipo.

Calcular un resumen del día basado en lo que comió.

Sugerir un menú aleatorio (batido, almuerzo, cena).

Eliminar comidas guardadas.

Guardar comidas como favoritas y mostrarlas.

Consultar el cumplimiento total semanal.

Leer o escribir la información en los archivos .txt para mantener los registros persistentes.

Repetir el menú hasta que el usuario elija la opción de salir.

🔍 Algoritmos por función
1. guardar_meta()

Propósito:
Guardar o actualizar la meta diaria de macronutrientes del usuario.

Algoritmo:

Pedir al usuario los gramos de proteína, carbohidratos y grasa.

Abrir el archivo meta.txt en modo escritura.

Guardar los tres valores separados por comas.

Cerrar el archivo y mostrar mensaje de confirmación.

2. leer_meta()

Propósito:
Leer los valores guardados en meta.txt para usarlos en cálculos posteriores.

Algoritmo:

Abrir el archivo meta.txt en modo lectura.

Leer la línea y dividirla por comas usando .split(",").

Convertir los valores a tipo float.

Retornar las tres variables: proteína, carbohidratos y grasa.

3. registrar_comida()

Propósito:
Registrar una nueva comida con sus valores nutricionales.

Algoritmo:

Solicitar al usuario el nombre, tipo (batido, almuerzo o cena), proteínas, carbohidratos, grasas e ingredientes.

Crear una línea con los datos separados por comas.

Abrir comidas.txt en modo append (añadir).

Escribir la línea y cerrar el archivo.

Mostrar confirmación.

4. mostrar_comidas()

Propósito:
Mostrar todas las comidas guardadas o filtrarlas por tipo.

Algoritmo:

Abrir comidas.txt y leer todas las líneas.

Preguntar al usuario si desea ver todas o filtrar (batido/almuerzo/cena).

Recorrer las líneas con un ciclo for.

Dividir cada línea por comas y mostrar la información formateada.

5. resumen_dia()

Propósito:
Calcular los macronutrientes totales consumidos y compararlos con la meta diaria.

Algoritmo:

Leer la meta desde meta.txt (proteína, carbohidratos, grasa).

Mostrar las comidas registradas y permitir que el usuario seleccione las que comió.

Sumar los valores nutricionales de las comidas elegidas.

Calcular la diferencia entre meta y consumo.

Mostrar un resumen con los totales y el resultado (si cumplió o no la meta).

6. sugerir_menu()

Propósito:
Ofrecer una combinación aleatoria de batido, almuerzo y cena.

Algoritmo:

Leer todas las comidas del archivo comidas.txt.

Agruparlas según su tipo.

Seleccionar una al azar con random.choice() por cada tipo.

Mostrar el menú sugerido con los valores totales de macronutrientes.

7. eliminar_comida()

Propósito:
Eliminar una comida seleccionada del registro.

Algoritmo:

Mostrar las comidas numeradas.

Pedir al usuario el número de la comida a eliminar.

Volver a escribir el archivo comidas.txt omitiendo esa línea.

8. guardar_favoritas()

Propósito:
Guardar una comida seleccionada como favorita.

Algoritmo:

Mostrar todas las comidas.

Pedir el número de la comida favorita.

Abrir favoritas.txt y escribir la línea correspondiente.

9. mostrar_favoritas()

Propósito:
Mostrar las comidas favoritas guardadas.

Algoritmo:

Abrir favoritas.txt y leer todas las líneas.

Mostrar cada comida con su tipo y valores nutricionales.

10. cumplimiento_total()

Propósito:
Revisar el historial de los días y calcular el porcentaje de cumplimiento general.

Algoritmo:

Abrir historial.txt y contar los días cumplidos, no cumplidos y sin uso.

Calcular los porcentajes con una regla de tres.

Mostrar en pantalla los resultados.

 Conclusión

Este proyecto demuestra la integración de todos los temas vistos en clase:

Variables y estructuras de control.

Listas y manipulación de cadenas.

Archivos para persistencia de datos.

Diseño modular con funciones y un menú principal.

Lógica aplicada a un contexto real de seguimiento alimenticio.

Gracias a su estructura, el programa es funcional, legible y cumple con las convenciones de estilo Python básicas.
